# Version 1.9
#
# Copyright (c) 2021 ojaksch, venice
#
# v1.9 ANSI codes, TTY2OLED_FW_TESTING, USE_GSC_PICTURE=yes default
# v1.8 USE_RANDOM_ALT to dice between xxx_alt* pictures
# v1.7 USE_GSC_PICTURE defaults to no
# v1.6 New Option USE_GSC_PICTURE
# v1.5 New Options CCSCRIPT, PICTURE_REPOSITORY_URL, USERSTARTUP, USERSTARTUPTPL
#      Add "-echo" to TTYPARAM
# v1.4 New Options UPDATESCRIPT, INITDISABLED, ROTATE, SCRIPT_UPDATE
#      New but unused Options USE_WO_PICTURE, USE_EU_PICTURE, USE_JP_PiCTURE
#      Changed "RAW" REPOSITORY_URL.
# v1.3 New Option "USE_US_PICTURE"
# v1.2 New Option "CONTRAST"
# v1.1 New Option "USE_TEXT_PICTURE"
# v1.0 Initial Release
#

fblink="\e[5m"
fbold="\e[1m"
fdim="\e[2m"
freset="\e[0m\033[0m"
finvers="\e[7m"
fhidden="\e[8m"
funderl="\e[4m"
fblue="\e[1;34m"
fgreen="\e[1;32m"
fcyan="\e[1;36m"
fred="\e[1;31m"
fmagenta="\e[1;35m"
fyellow="\e[1;33m"
fwhite="\e[1;37m"
fgrey="\e[1;30m"
chide="\e[?25l"
cshow="\e[?25h"

REPOSITORY_URL="https://raw.githubusercontent.com/venice1200/MiSTer_tty2oled/main"
#REPOSITORY_URL="https://raw.githubusercontent.com/venice1200/MiSTer_tty2oled/main/Testing"
PICTURE_REPOSITORY_URL="https://www.tty2tft.de"
export RSYNC_PASSWORD="eSvcFFF5aLpmbNqWKE3SE2FewkWE"

TTY2OLED_PATH="/media/fat/tty2oled"
NODEBUG="-q -o /dev/null"

INITSCRIPT="${TTY2OLED_PATH}/S60tty2oled"
INITDISABLED="${TTY2OLED_PATH}/_S60tty2oled"
UPDATESCRIPT="/media/fat/Scripts/update_tty2oled.sh"
DAEMONNAME="tty2oled.sh"
DAEMONSCRIPT="${TTY2OLED_PATH}/tty2oled.sh"
CCSCRIPT="/media/fat/Scripts/tty2oled_cc.sh"
USERSTARTUP="/media/fat/linux/user-startup.sh"
USERSTARTUPTPL="/media/fat/linux/_user-startup.sh"

WAITSECS="0.02"
ttyresponse=""
newcore=""
oldcore=""
corenamefile="/tmp/CORENAME"
picturefolder="${TTY2OLED_PATH}/pics"
picturefolder_pri="${TTY2OLED_PATH}/pics_pri"

# Debugging
debug="false"
debugfile="/tmp/tty2oled"

# Do not change this until you know what you do
MOUNTRO="false"			# Helper flag for update_tty2oled_script.sh. Please don't touch as it leaves the SD card of MiSTer writeable otherwise.

# Recurring functions
yesno() {
    seconds=${1}
    [ -z "${seconds}" ] && seconds=5
    echo -en "${chide}"
    while [ ${seconds} -gt 0 ]; do
	echo -en "\e[1D${fred}${seconds}${freset}"
	read -r -s -t1 -N1 KEY
	[ "${KEY}" == "A" ] && KEY="y" && break
	[ "${KEY}" == "B" ] && KEY="n" && break
	: $((seconds--))
    done
    echo -en "${cshow}"
    echo
}
